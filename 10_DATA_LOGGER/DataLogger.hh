// ----------------------------------------------------------------------------
// OpenSDSE - HLA Compliant Distributed Aircraft Simulation
// Copyright (C) 2017  ISAE
//
// This program is free software ; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation ; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY ; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program ; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
//
// ----------------------------------------------------------------------------

#ifndef DATA_LOGGER_HH
#define DATA_LOGGER_HH

#include "UnitConversion.hh"
#include <cmath>
#include <iostream>

using namespace std;
using std::cout;


// Stores all the data comming from the simulation
class DataLogger : public UnitConversion
{
    private:

		double TRIM_DATA_RIGHT_ENGINE_THRUST_EQ;
		double TRIM_DATA_LEFT_ENGINE_THRUST_EQ;
		double TRIM_DATA_RIGHT_ENGINE_THROTTLE_EQ;
		double TRIM_DATA_LEFT_ENGINE_THROTTLE_EQ;
		double TRIM_DATA_ELEVATOR_DEFLECTION_EQ;
		double TRIM_DATA_STABILIZER_DEFLECTION_EQ;

		double JOYSTICK_AILERON;
		double JOYSTICK_ELEVATOR;
		double JOYSTICK_RUDDER;
		double JOYSTICK_THROTTLE_LEFT;
		double JOYSTICK_THROTTLE_RIGHT;
		double JOYSTICK_FLAPS;
		double JOYSTICK_SPOILERS;
		double JOYSTICK_GEARS;
		double JOYSTICK_BRAKES;

		double FLIGHT_CONTROLS_RIGHT_AILERON_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_LEFT_AILERON_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_RIGHT_ELEVATOR_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_LEFT_ELEVATOR_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_RUDDER_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_RIGHT_ENGINE_COMMANDED_THROTTLE;
		double FLIGHT_CONTROLS_LEFT_ENGINE_COMMANDED_THROTTLE;
		double FLIGHT_CONTROLS_FLAPS_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_SPOILERS_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_STABILIZER_COMMANDED_DEFLECTION;
		double FLIGHT_CONTROLS_GEARS_COMMANDED_POSITION;

		double ACTUATORS_RIGHT_AILERON_EFFECTIVE_DEFLECTION;
		double ACTUATORS_LEFT_AILERON_EFFECTIVE_DEFLECTION;
		double ACTUATORS_RIGHT_ELEVATOR_EFFECTIVE_DEFLECTION;
		double ACTUATORS_LEFT_ELEVATOR_EFFECTIVE_DEFLECTION;
		double ACTUATORS_RUDDER_EFFECTIVE_DEFLECTION;
		double ACTUATORS_RIGHT_ENGINE_THRUST;
		double ACTUATORS_LEFT_ENGINE_THRUST;
		double ACTUATORS_FLAPS_EFFECTIVE_DEFLECTION;
		double ACTUATORS_SPOILERS_EFFECTIVE_DEFLECTION;
		double ACTUATORS_STABILIZER_EFFECTIVE_DEFLECTION;
		double ACTUATORS_GEARS_POSITION;

		double AIRCRAFT_POSITION_LONGITUDE;
		double AIRCRAFT_POSITION_LATITUDE;
		double AIRCRAFT_POSITION_ALTITUDE;

		double AIRCRAFT_ORIENTATION_PHI;
		double AIRCRAFT_ORIENTATION_THETA;
		double AIRCRAFT_ORIENTATION_PSI;

		double AIRCRAFT_UVW_SPEED_U_SPEED;
		double AIRCRAFT_UVW_SPEED_V_SPEED;
		double AIRCRAFT_UVW_SPEED_W_SPEED;

		double AIRCRAFT_PQR_ANGULAR_SPEED_P_ANG_SPEED;
		double AIRCRAFT_PQR_ANGULAR_SPEED_Q_ANG_SPEED;
		double AIRCRAFT_PQR_ANGULAR_SPEED_R_ANG_SPEED;

		double AIRCRAFT_ACCELERATION_X_ACC;
		double AIRCRAFT_ACCELERATION_Y_ACC;
		double AIRCRAFT_ACCELERATION_Z_ACC;

		double AIRCRAFT_SPEED_INDICATED_AIRSPEED;
		double AIRCRAFT_SPEED_EQUIVALENT_AIRSPEED;
		double AIRCRAFT_SPEED_CALIBRATED_AIRSPEED;
		double AIRCRAFT_SPEED_TRUE_AIRSPEED;
		double AIRCRAFT_SPEED_GROUND_SPEED;
		double AIRCRAFT_SPEED_VERTICAL_SPEED;
		double AIRCRAFT_SPEED_MACH_NUMBER;

		double AIRCRAFT_ADDITIONAL_ALPHA;
		double AIRCRAFT_ADDITIONAL_BETA;
		double AIRCRAFT_ADDITIONAL_DYNAMIC_PRESSURE;
		double AIRCRAFT_ADDITIONAL_TANK_FILLING;

		double MEAS_AIRCRAFT_POSITION_MEAS_LONGITUDE;
		double MEAS_AIRCRAFT_POSITION_MEAS_LATITUDE;
		double MEAS_AIRCRAFT_POSITION_MEAS_ALTITUDE;

		double MEAS_AIRCRAFT_ORIENTATION_MEAS_PHI;
		double MEAS_AIRCRAFT_ORIENTATION_MEAS_THETA;
		double MEAS_AIRCRAFT_ORIENTATION_MEAS_PSI;

		double MEAS_AIRCRAFT_UVW_SPEED_MEAS_U_SPEED;
		double MEAS_AIRCRAFT_UVW_SPEED_MEAS_V_SPEED;
		double MEAS_AIRCRAFT_UVW_SPEED_MEAS_W_SPEED;

		double MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_P_ANG_SPEED;
		double MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_Q_ANG_SPEED;
		double MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_R_ANG_SPEED;

		double MEAS_AIRCRAFT_ACCELERATION_MEAS_X_ACC;
		double MEAS_AIRCRAFT_ACCELERATION_MEAS_Y_ACC;
		double MEAS_AIRCRAFT_ACCELERATION_MEAS_Z_ACC;

		double MEAS_AIRCRAFT_SPEED_MEAS_INDICATED_AIRSPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_EQUIVALENT_AIRSPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_CALIBRATED_AIRSPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_TRUE_AIRSPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_GROUND_SPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_VERTICAL_SPEED;
		double MEAS_AIRCRAFT_SPEED_MEAS_MACH_NUMBER;

		double MEAS_AIRCRAFT_ADDITIONAL_MEAS_ALPHA;
		double MEAS_AIRCRAFT_ADDITIONAL_MEAS_BETA;
		double MEAS_AIRCRAFT_ADDITIONAL_MEAS_DYNAMIC_PRESSURE;
		double MEAS_AIRCRAFT_ADDITIONAL_MEAS_TANK_FILLING;

		double ENVIRONMENT_VARIABLES_TEMPERATURE;
		double ENVIRONMENT_VARIABLES_DENSITY_OF_AIR;
		double ENVIRONMENT_VARIABLES_PRESSURE;
		double ENVIRONMENT_VARIABLES_SPEED_OF_SOUND;

		double WIND_COMPONENTS_U_WIND;
		double WIND_COMPONENTS_V_WIND;
		double WIND_COMPONENTS_W_WIND;
		double WIND_COMPONENTS_P_WIND;
		double WIND_COMPONENTS_Q_WIND;
		double WIND_COMPONENTS_R_WIND;

	public:

	// Constructor
	DataLogger();
	// Destructor
	~DataLogger();

	// Get functions

	double GET_TRIM_DATA_RIGHT_ENGINE_THRUST_EQ()				{return  TRIM_DATA_RIGHT_ENGINE_THRUST_EQ;};
	double GET_TRIM_DATA_LEFT_ENGINE_THRUST_EQ()				{return  TRIM_DATA_LEFT_ENGINE_THRUST_EQ;};
	double GET_TRIM_DATA_RIGHT_ENGINE_THROTTLE_EQ()				{return  TRIM_DATA_RIGHT_ENGINE_THROTTLE_EQ;};
	double GET_TRIM_DATA_LEFT_ENGINE_THROTTLE_EQ()				{return  TRIM_DATA_LEFT_ENGINE_THROTTLE_EQ;};
	double GET_TRIM_DATA_ELEVATOR_DEFLECTION_EQ()			{return  TRIM_DATA_ELEVATOR_DEFLECTION_EQ;};
	double GET_TRIM_DATA_STABILIZER_DEFLECTION_EQ()			{return  TRIM_DATA_STABILIZER_DEFLECTION_EQ;};

	double GET_JOYSTICK_AILERON()						{return  JOYSTICK_AILERON;};
	double GET_JOYSTICK_ELEVATOR()						{return  JOYSTICK_ELEVATOR;};
	double GET_JOYSTICK_RUDDER()						{return  JOYSTICK_RUDDER;};
	double GET_JOYSTICK_THROTTLE_LEFT()					{return  JOYSTICK_THROTTLE_LEFT;};
	double GET_JOYSTICK_THROTTLE_RIGHT()				{return  JOYSTICK_THROTTLE_RIGHT;};
	double GET_JOYSTICK_FLAPS()                         {return  JOYSTICK_FLAPS;};
	double GET_JOYSTICK_SPOILERS()                      {return  JOYSTICK_SPOILERS;};
	double GET_JOYSTICK_GEARS()                         {return  JOYSTICK_GEARS;};
	double GET_JOYSTICK_BRAKES()                        {return  JOYSTICK_BRAKES;};

	double GET_FLIGHT_CONTROLS_RIGHT_AILERON_COMMANDED_DEFLECTION()		{return  FLIGHT_CONTROLS_RIGHT_AILERON_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_LEFT_AILERON_COMMANDED_DEFLECTION()		{return  FLIGHT_CONTROLS_LEFT_AILERON_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_RIGHT_ELEVATOR_COMMANDED_DEFLECTION()	{return  FLIGHT_CONTROLS_RIGHT_ELEVATOR_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_LEFT_ELEVATOR_COMMANDED_DEFLECTION()		{return  FLIGHT_CONTROLS_LEFT_ELEVATOR_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_RUDDER_COMMANDED_DEFLECTION()		{return  FLIGHT_CONTROLS_RUDDER_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_RIGHT_ENGINE_COMMANDED_THROTTLE()		{return  FLIGHT_CONTROLS_RIGHT_ENGINE_COMMANDED_THROTTLE;};
	double GET_FLIGHT_CONTROLS_LEFT_ENGINE_COMMANDED_THROTTLE()		{return  FLIGHT_CONTROLS_LEFT_ENGINE_COMMANDED_THROTTLE;};
	double GET_FLIGHT_CONTROLS_FLAPS_COMMANDED_DEFLECTION()	        	{return  FLIGHT_CONTROLS_FLAPS_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_SPOILERS_COMMANDED_DEFLECTION()	       	{return  FLIGHT_CONTROLS_SPOILERS_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_STABILIZER_COMMANDED_DEFLECTION()	        	{return  FLIGHT_CONTROLS_STABILIZER_COMMANDED_DEFLECTION;};
	double GET_FLIGHT_CONTROLS_GEARS_COMMANDED_POSITION()	        	{return  FLIGHT_CONTROLS_GEARS_COMMANDED_POSITION;};

	double GET_ACTUATORS_RIGHT_AILERON_EFFECTIVE_DEFLECTION()		{return  ACTUATORS_RIGHT_AILERON_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_LEFT_AILERON_EFFECTIVE_DEFLECTION()		{return  ACTUATORS_LEFT_AILERON_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_RIGHT_ELEVATOR_EFFECTIVE_DEFLECTION()		{return  ACTUATORS_RIGHT_ELEVATOR_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_LEFT_ELEVATOR_EFFECTIVE_DEFLECTION()		{return  ACTUATORS_LEFT_ELEVATOR_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_RUDDER_EFFECTIVE_DEFLECTION()			{return  ACTUATORS_RUDDER_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_RIGHT_ENGINE_THRUST()				{return  ACTUATORS_RIGHT_ENGINE_THRUST;};
	double GET_ACTUATORS_LEFT_ENGINE_THRUST()				{return  ACTUATORS_LEFT_ENGINE_THRUST;};
	double GET_ACTUATORS_FLAPS_EFFECTIVE_DEFLECTION()				{return  ACTUATORS_FLAPS_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_SPOILERS_EFFECTIVE_DEFLECTION()			{return  ACTUATORS_SPOILERS_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_STABILIZER_EFFECTIVE_DEFLECTION()			{return  ACTUATORS_STABILIZER_EFFECTIVE_DEFLECTION;};
	double GET_ACTUATORS_GEARS_POSITION()              				{return  ACTUATORS_GEARS_POSITION;};

	double GET_AIRCRAFT_POSITION_LONGITUDE()				{return  AIRCRAFT_POSITION_LONGITUDE;};
	double GET_AIRCRAFT_POSITION_LATITUDE()					{return  AIRCRAFT_POSITION_LATITUDE;};
	double GET_AIRCRAFT_POSITION_ALTITUDE()					{return  AIRCRAFT_POSITION_ALTITUDE;};

	double GET_AIRCRAFT_ORIENTATION_PHI()					{return  AIRCRAFT_ORIENTATION_PHI;};
	double GET_AIRCRAFT_ORIENTATION_THETA()					{return  AIRCRAFT_ORIENTATION_THETA;};
	double GET_AIRCRAFT_ORIENTATION_PSI()					{return  AIRCRAFT_ORIENTATION_PSI;};

	double GET_AIRCRAFT_UVW_SPEED_U_SPEED()					{return  AIRCRAFT_UVW_SPEED_U_SPEED;};
	double GET_AIRCRAFT_UVW_SPEED_V_SPEED()					{return  AIRCRAFT_UVW_SPEED_V_SPEED;};
	double GET_AIRCRAFT_UVW_SPEED_W_SPEED()					{return  AIRCRAFT_UVW_SPEED_W_SPEED;};

	double GET_AIRCRAFT_PQR_ANGULAR_SPEED_P_ANG_SPEED()			{return  AIRCRAFT_PQR_ANGULAR_SPEED_P_ANG_SPEED;};
	double GET_AIRCRAFT_PQR_ANGULAR_SPEED_Q_ANG_SPEED()			{return  AIRCRAFT_PQR_ANGULAR_SPEED_Q_ANG_SPEED;};
	double GET_AIRCRAFT_PQR_ANGULAR_SPEED_R_ANG_SPEED()			{return  AIRCRAFT_PQR_ANGULAR_SPEED_R_ANG_SPEED;};

	double GET_AIRCRAFT_ACCELERATION_X_ACC()				{return  AIRCRAFT_ACCELERATION_X_ACC;};
	double GET_AIRCRAFT_ACCELERATION_Y_ACC()				{return  AIRCRAFT_ACCELERATION_Y_ACC;};
	double GET_AIRCRAFT_ACCELERATION_Z_ACC()				{return  AIRCRAFT_ACCELERATION_Z_ACC;};

	double GET_AIRCRAFT_SPEED_INDICATED_AIRSPEED()				{return  AIRCRAFT_SPEED_INDICATED_AIRSPEED;};
	double GET_AIRCRAFT_SPEED_EQUIVALENT_AIRSPEED()				{return  AIRCRAFT_SPEED_EQUIVALENT_AIRSPEED;};
	double GET_AIRCRAFT_SPEED_CALIBRATED_AIRSPEED()				{return  AIRCRAFT_SPEED_CALIBRATED_AIRSPEED;};
	double GET_AIRCRAFT_SPEED_TRUE_AIRSPEED()				{return  AIRCRAFT_SPEED_TRUE_AIRSPEED;};
	double GET_AIRCRAFT_SPEED_GROUND_SPEED()				{return  AIRCRAFT_SPEED_GROUND_SPEED;};
	double GET_AIRCRAFT_SPEED_VERTICAL_SPEED()				{return  AIRCRAFT_SPEED_VERTICAL_SPEED;};
	double GET_AIRCRAFT_SPEED_MACH_NUMBER()					{return  AIRCRAFT_SPEED_MACH_NUMBER;};

	double GET_AIRCRAFT_ADDITIONAL_ALPHA()					{return  AIRCRAFT_ADDITIONAL_ALPHA;};
	double GET_AIRCRAFT_ADDITIONAL_BETA()					{return  AIRCRAFT_ADDITIONAL_BETA;};
	double GET_AIRCRAFT_ADDITIONAL_DYNAMIC_PRESSURE()			{return  AIRCRAFT_ADDITIONAL_DYNAMIC_PRESSURE;};
	double GET_AIRCRAFT_ADDITIONAL_TANK_FILLING()			{return  AIRCRAFT_ADDITIONAL_TANK_FILLING;};

	double GET_MEAS_AIRCRAFT_POSITION_MEAS_LONGITUDE()			{return  MEAS_AIRCRAFT_POSITION_MEAS_LONGITUDE;};
	double GET_MEAS_AIRCRAFT_POSITION_MEAS_LATITUDE()			{return  MEAS_AIRCRAFT_POSITION_MEAS_LATITUDE;};
	double GET_MEAS_AIRCRAFT_POSITION_MEAS_ALTITUDE()			{return  MEAS_AIRCRAFT_POSITION_MEAS_ALTITUDE;};

	double GET_MEAS_AIRCRAFT_ORIENTATION_MEAS_PHI()				{return  MEAS_AIRCRAFT_ORIENTATION_MEAS_PHI;};
	double GET_MEAS_AIRCRAFT_ORIENTATION_MEAS_THETA()			{return  MEAS_AIRCRAFT_ORIENTATION_MEAS_THETA;};
	double GET_MEAS_AIRCRAFT_ORIENTATION_MEAS_PSI()				{return  MEAS_AIRCRAFT_ORIENTATION_MEAS_PSI;};

	double GET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_U_SPEED()			{return  MEAS_AIRCRAFT_UVW_SPEED_MEAS_U_SPEED;};
	double GET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_V_SPEED()			{return  MEAS_AIRCRAFT_UVW_SPEED_MEAS_V_SPEED;};
	double GET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_W_SPEED()			{return  MEAS_AIRCRAFT_UVW_SPEED_MEAS_W_SPEED;};

	double GET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_P_ANG_SPEED()		{return  MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_P_ANG_SPEED;};
	double GET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_Q_ANG_SPEED()		{return  MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_Q_ANG_SPEED;};
	double GET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_R_ANG_SPEED()		{return  MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_R_ANG_SPEED;};

	double GET_MEAS_AIRCRAFT_ACCELERATION_MEAS_X_ACC()			{return  MEAS_AIRCRAFT_ACCELERATION_MEAS_X_ACC;};
	double GET_MEAS_AIRCRAFT_ACCELERATION_MEAS_Y_ACC()			{return  MEAS_AIRCRAFT_ACCELERATION_MEAS_Y_ACC;};
	double GET_MEAS_AIRCRAFT_ACCELERATION_MEAS_Z_ACC()			{return  MEAS_AIRCRAFT_ACCELERATION_MEAS_Z_ACC;};

	double GET_MEAS_AIRCRAFT_SPEED_MEAS_INDICATED_AIRSPEED()		{return  MEAS_AIRCRAFT_SPEED_MEAS_INDICATED_AIRSPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_EQUIVALENT_AIRSPEED()		{return  MEAS_AIRCRAFT_SPEED_MEAS_EQUIVALENT_AIRSPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_CALIBRATED_AIRSPEED()		{return  MEAS_AIRCRAFT_SPEED_MEAS_CALIBRATED_AIRSPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_TRUE_AIRSPEED()			{return  MEAS_AIRCRAFT_SPEED_MEAS_TRUE_AIRSPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_GROUND_SPEED()			{return  MEAS_AIRCRAFT_SPEED_MEAS_GROUND_SPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_VERTICAL_SPEED()			{return  MEAS_AIRCRAFT_SPEED_MEAS_VERTICAL_SPEED;};
	double GET_MEAS_AIRCRAFT_SPEED_MEAS_MACH_NUMBER()			{return  MEAS_AIRCRAFT_SPEED_MEAS_MACH_NUMBER;};

	double GET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_ALPHA()			{return  MEAS_AIRCRAFT_ADDITIONAL_MEAS_ALPHA;};
	double GET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_BETA()				{return  MEAS_AIRCRAFT_ADDITIONAL_MEAS_BETA;};
	double GET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_DYNAMIC_PRESSURE()		{return  MEAS_AIRCRAFT_ADDITIONAL_MEAS_DYNAMIC_PRESSURE;};
	double GET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_TANK_FILLING()		{return  MEAS_AIRCRAFT_ADDITIONAL_MEAS_TANK_FILLING;};

	double GET_ENVIRONMENT_VARIABLES_TEMPERATURE()				{return  ENVIRONMENT_VARIABLES_TEMPERATURE;};
	double GET_ENVIRONMENT_VARIABLES_DENSITY_OF_AIR()			{return  ENVIRONMENT_VARIABLES_DENSITY_OF_AIR;};
	double GET_ENVIRONMENT_VARIABLES_PRESSURE()				{return  ENVIRONMENT_VARIABLES_PRESSURE;};
	double GET_ENVIRONMENT_VARIABLES_SPEED_OF_SOUND()			{return  ENVIRONMENT_VARIABLES_SPEED_OF_SOUND;};

	double GET_WIND_COMPONENTS_U_WIND()					{return  WIND_COMPONENTS_U_WIND;};
	double GET_WIND_COMPONENTS_V_WIND()					{return  WIND_COMPONENTS_V_WIND;};
	double GET_WIND_COMPONENTS_W_WIND()					{return  WIND_COMPONENTS_W_WIND;};
	double GET_WIND_COMPONENTS_P_WIND()					{return  WIND_COMPONENTS_P_WIND;};
	double GET_WIND_COMPONENTS_Q_WIND()					{return  WIND_COMPONENTS_Q_WIND;};
	double GET_WIND_COMPONENTS_R_WIND()					{return  WIND_COMPONENTS_R_WIND;};


	// Set functions

	void SET_TRIM_DATA_RIGHT_ENGINE_THRUST_EQ(double input) 			{ TRIM_DATA_RIGHT_ENGINE_THRUST_EQ = input;  
	};
	void SET_TRIM_DATA_LEFT_ENGINE_THRUST_EQ(double input) 				{ TRIM_DATA_LEFT_ENGINE_THRUST_EQ = input;  };
	void SET_TRIM_DATA_RIGHT_ENGINE_THROTTLE_EQ(double input) 			{ TRIM_DATA_RIGHT_ENGINE_THROTTLE_EQ = input;  };
	void SET_TRIM_DATA_LEFT_ENGINE_THROTTLE_EQ(double input) 			{ TRIM_DATA_LEFT_ENGINE_THROTTLE_EQ = input; };
	void SET_TRIM_DATA_ELEVATOR_DEFLECTION_EQ(double input) 			{ TRIM_DATA_ELEVATOR_DEFLECTION_EQ = input;  };
	void SET_TRIM_DATA_STABILIZER_DEFLECTION_EQ(double input) 			{ TRIM_DATA_STABILIZER_DEFLECTION_EQ = input;  };

	void SET_JOYSTICK_AILERON(double input) 					{ JOYSTICK_AILERON = input;  };
	void SET_JOYSTICK_ELEVATOR(double input) 					{ JOYSTICK_ELEVATOR  = input;  };
	void SET_JOYSTICK_RUDDER(double input) 						{ JOYSTICK_RUDDER = input;  };
	void SET_JOYSTICK_THROTTLE_LEFT(double input) 				{ JOYSTICK_THROTTLE_LEFT = input;  };
	void SET_JOYSTICK_THROTTLE_RIGHT(double input) 				{ JOYSTICK_THROTTLE_RIGHT = input;  };
	void SET_JOYSTICK_FLAPS(double input)                   	{ JOYSTICK_FLAPS = input;  };
	void SET_JOYSTICK_SPOILERS(double input)                   	{ JOYSTICK_SPOILERS = input;  };
	void SET_JOYSTICK_GEARS(double input)                   	{ JOYSTICK_GEARS = input;  };
	void SET_JOYSTICK_BRAKES(double input)                   	{ JOYSTICK_BRAKES = input;  };

	void SET_FLIGHT_CONTROLS_RIGHT_AILERON_COMMANDED_DEFLECTION(double input) 	{ FLIGHT_CONTROLS_RIGHT_AILERON_COMMANDED_DEFLECTION = input;  };
	void SET_FLIGHT_CONTROLS_LEFT_AILERON_COMMANDED_DEFLECTION(double input) 	{ FLIGHT_CONTROLS_LEFT_AILERON_COMMANDED_DEFLECTION = input; };
	void SET_FLIGHT_CONTROLS_RIGHT_ELEVATOR_COMMANDED_DEFLECTION(double input) 	{ FLIGHT_CONTROLS_RIGHT_ELEVATOR_COMMANDED_DEFLECTION = input;  };
	void SET_FLIGHT_CONTROLS_LEFT_ELEVATOR_COMMANDED_DEFLECTION(double input) 	{ FLIGHT_CONTROLS_LEFT_ELEVATOR_COMMANDED_DEFLECTION = input;  };
	void SET_FLIGHT_CONTROLS_RUDDER_COMMANDED_DEFLECTION(double input) 		{ FLIGHT_CONTROLS_RUDDER_COMMANDED_DEFLECTION= input;  };
	void SET_FLIGHT_CONTROLS_RIGHT_ENGINE_COMMANDED_THROTTLE(double input) 		{ FLIGHT_CONTROLS_RIGHT_ENGINE_COMMANDED_THROTTLE= input;  };
	void SET_FLIGHT_CONTROLS_LEFT_ENGINE_COMMANDED_THROTTLE(double input) 		{ FLIGHT_CONTROLS_LEFT_ENGINE_COMMANDED_THROTTLE= input;  };
	void SET_FLIGHT_CONTROLS_FLAPS_COMMANDED_DEFLECTION(double input) 		{ FLIGHT_CONTROLS_FLAPS_COMMANDED_DEFLECTION= input;  };
	void SET_FLIGHT_CONTROLS_SPOILERS_COMMANDED_DEFLECTION(double input) 		{ FLIGHT_CONTROLS_SPOILERS_COMMANDED_DEFLECTION= input;  };
	void SET_FLIGHT_CONTROLS_STABILIZER_COMMANDED_DEFLECTION(double input) 		{ FLIGHT_CONTROLS_STABILIZER_COMMANDED_DEFLECTION= input;  };
	void SET_FLIGHT_CONTROLS_GEARS_COMMANDED_POSITION(double input) 		{ FLIGHT_CONTROLS_GEARS_COMMANDED_POSITION= input;  };

	void SET_ACTUATORS_RIGHT_AILERON_EFFECTIVE_DEFLECTION(double input) 		{ ACTUATORS_RIGHT_AILERON_EFFECTIVE_DEFLECTION= input;  };
	void SET_ACTUATORS_LEFT_AILERON_EFFECTIVE_DEFLECTION(double input) 		{ ACTUATORS_LEFT_AILERON_EFFECTIVE_DEFLECTION= input;  };
	void SET_ACTUATORS_RIGHT_ELEVATOR_EFFECTIVE_DEFLECTION(double input) 		{ ACTUATORS_RIGHT_ELEVATOR_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_LEFT_ELEVATOR_EFFECTIVE_DEFLECTION(double input) 		{ ACTUATORS_LEFT_ELEVATOR_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_RUDDER_EFFECTIVE_DEFLECTION(double input) 			{ ACTUATORS_RUDDER_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_RIGHT_ENGINE_THRUST(double input) 				{ ACTUATORS_RIGHT_ENGINE_THRUST= input; };
	void SET_ACTUATORS_LEFT_ENGINE_THRUST(double input) 				{ ACTUATORS_LEFT_ENGINE_THRUST= input; };
	void SET_ACTUATORS_FLAPS_EFFECTIVE_DEFLECTION(double input) 			{ ACTUATORS_FLAPS_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_SPOILERS_EFFECTIVE_DEFLECTION(double input) 			{ ACTUATORS_SPOILERS_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_STABILIZER_EFFECTIVE_DEFLECTION(double input) 			{ ACTUATORS_STABILIZER_EFFECTIVE_DEFLECTION= input; };
	void SET_ACTUATORS_GEARS_POSITION(double input) 			{ ACTUATORS_GEARS_POSITION= input; };

	void SET_AIRCRAFT_POSITION_LONGITUDE(double input) 				{ AIRCRAFT_POSITION_LONGITUDE= input; };
	void SET_AIRCRAFT_POSITION_LATITUDE(double input) 				{ AIRCRAFT_POSITION_LATITUDE= input; };
	void SET_AIRCRAFT_POSITION_ALTITUDE(double input) 				{ AIRCRAFT_POSITION_ALTITUDE= input; };

	void SET_AIRCRAFT_ORIENTATION_PHI(double input) 				{ AIRCRAFT_ORIENTATION_PHI= input; };
	void SET_AIRCRAFT_ORIENTATION_THETA(double input) 				{ AIRCRAFT_ORIENTATION_THETA = input; };
	void SET_AIRCRAFT_ORIENTATION_PSI(double input) 				{ AIRCRAFT_ORIENTATION_PSI= input; };

	void SET_AIRCRAFT_UVW_SPEED_U_SPEED(double input) 				{ AIRCRAFT_UVW_SPEED_U_SPEED= input; };
	void SET_AIRCRAFT_UVW_SPEED_V_SPEED(double input) 				{ AIRCRAFT_UVW_SPEED_V_SPEED= input; };
	void SET_AIRCRAFT_UVW_SPEED_W_SPEED(double input) 				{ AIRCRAFT_UVW_SPEED_W_SPEED= input; };

	void SET_AIRCRAFT_PQR_ANGULAR_SPEED_P_ANG_SPEED(double input) 			{ AIRCRAFT_PQR_ANGULAR_SPEED_P_ANG_SPEED= input; };
	void SET_AIRCRAFT_PQR_ANGULAR_SPEED_Q_ANG_SPEED(double input) 			{ AIRCRAFT_PQR_ANGULAR_SPEED_Q_ANG_SPEED= input; };
	void SET_AIRCRAFT_PQR_ANGULAR_SPEED_R_ANG_SPEED(double input) 			{ AIRCRAFT_PQR_ANGULAR_SPEED_R_ANG_SPEED= input; };

	void SET_AIRCRAFT_ACCELERATION_X_ACC(double input) 				{ AIRCRAFT_ACCELERATION_X_ACC= input; };
	void SET_AIRCRAFT_ACCELERATION_Y_ACC(double input) 				{ AIRCRAFT_ACCELERATION_Y_ACC= input; };
	void SET_AIRCRAFT_ACCELERATION_Z_ACC(double input) 				{ AIRCRAFT_ACCELERATION_Z_ACC= input; };

	void SET_AIRCRAFT_SPEED_INDICATED_AIRSPEED(double input) 			{ AIRCRAFT_SPEED_INDICATED_AIRSPEED= input; };
	void SET_AIRCRAFT_SPEED_EQUIVALENT_AIRSPEED(double input) 			{ AIRCRAFT_SPEED_EQUIVALENT_AIRSPEED= input; };
	void SET_AIRCRAFT_SPEED_CALIBRATED_AIRSPEED(double input) 			{ AIRCRAFT_SPEED_CALIBRATED_AIRSPEED= input; };
	void SET_AIRCRAFT_SPEED_TRUE_AIRSPEED(double input) 				{ AIRCRAFT_SPEED_TRUE_AIRSPEED= input; };
	void SET_AIRCRAFT_SPEED_GROUND_SPEED(double input) 				{ AIRCRAFT_SPEED_GROUND_SPEED= input; };
	void SET_AIRCRAFT_SPEED_VERTICAL_SPEED(double input) 				{ AIRCRAFT_SPEED_VERTICAL_SPEED= input; };
	void SET_AIRCRAFT_SPEED_MACH_NUMBER(double input) 				{ AIRCRAFT_SPEED_MACH_NUMBER  = input; };

	void SET_AIRCRAFT_ADDITIONAL_ALPHA(double input) 				{ AIRCRAFT_ADDITIONAL_ALPHA= input; };
	void SET_AIRCRAFT_ADDITIONAL_BETA(double input) 				{ AIRCRAFT_ADDITIONAL_BETA= input; };
	void SET_AIRCRAFT_ADDITIONAL_DYNAMIC_PRESSURE(double input) 			{ AIRCRAFT_ADDITIONAL_DYNAMIC_PRESSURE= input; };
	void SET_AIRCRAFT_ADDITIONAL_TANK_FILLING(double input) 				{ AIRCRAFT_ADDITIONAL_TANK_FILLING= input; };

	void SET_MEAS_AIRCRAFT_POSITION_MEAS_LONGITUDE(double input) 			{ MEAS_AIRCRAFT_POSITION_MEAS_LONGITUDE = input; };
	void SET_MEAS_AIRCRAFT_POSITION_MEAS_LATITUDE(double input) 			{ MEAS_AIRCRAFT_POSITION_MEAS_LATITUDE = input; };
	void SET_MEAS_AIRCRAFT_POSITION_MEAS_ALTITUDE(double input) 			{ MEAS_AIRCRAFT_POSITION_MEAS_ALTITUDE = input; };

	void SET_MEAS_AIRCRAFT_ORIENTATION_MEAS_PHI(double input) 			{ MEAS_AIRCRAFT_ORIENTATION_MEAS_PHI = input; };
	void SET_MEAS_AIRCRAFT_ORIENTATION_MEAS_THETA(double input) 			{ MEAS_AIRCRAFT_ORIENTATION_MEAS_THETA = input; };
	void SET_MEAS_AIRCRAFT_ORIENTATION_MEAS_PSI(double input) 			{ MEAS_AIRCRAFT_ORIENTATION_MEAS_PSI = input; };

	void SET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_U_SPEED(double input) 			{ MEAS_AIRCRAFT_UVW_SPEED_MEAS_U_SPEED = input; };
	void SET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_V_SPEED(double input) 			{ MEAS_AIRCRAFT_UVW_SPEED_MEAS_V_SPEED = input; };
	void SET_MEAS_AIRCRAFT_UVW_SPEED_MEAS_W_SPEED(double input) 			{ MEAS_AIRCRAFT_UVW_SPEED_MEAS_W_SPEED = input; };

	void SET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_P_ANG_SPEED(double input) 	{ MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_P_ANG_SPEED = input; };
	void SET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_Q_ANG_SPEED(double input) 	{ MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_Q_ANG_SPEED = input; };
	void SET_MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_R_ANG_SPEED(double input) 	{ MEAS_AIRCRAFT_PQR_ANGULAR_SPEED_MEAS_R_ANG_SPEED = input; };

	void SET_MEAS_AIRCRAFT_ACCELERATION_MEAS_X_ACC(double input) 			{ MEAS_AIRCRAFT_ACCELERATION_MEAS_X_ACC = input; };
	void SET_MEAS_AIRCRAFT_ACCELERATION_MEAS_Y_ACC(double input) 			{ MEAS_AIRCRAFT_ACCELERATION_MEAS_Y_ACC = input; };
	void SET_MEAS_AIRCRAFT_ACCELERATION_MEAS_Z_ACC(double input) 			{ MEAS_AIRCRAFT_ACCELERATION_MEAS_Z_ACC = input; };

	void SET_MEAS_AIRCRAFT_SPEED_MEAS_INDICATED_AIRSPEED(double input) 		{ MEAS_AIRCRAFT_SPEED_MEAS_INDICATED_AIRSPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_EQUIVALENT_AIRSPEED(double input) 		{ MEAS_AIRCRAFT_SPEED_MEAS_EQUIVALENT_AIRSPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_CALIBRATED_AIRSPEED(double input) 		{ MEAS_AIRCRAFT_SPEED_MEAS_CALIBRATED_AIRSPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_TRUE_AIRSPEED(double input) 			{ MEAS_AIRCRAFT_SPEED_MEAS_TRUE_AIRSPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_GROUND_SPEED(double input) 			{ MEAS_AIRCRAFT_SPEED_MEAS_GROUND_SPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_VERTICAL_SPEED(double input) 			{ MEAS_AIRCRAFT_SPEED_MEAS_VERTICAL_SPEED = input; };
	void SET_MEAS_AIRCRAFT_SPEED_MEAS_MACH_NUMBER(double input) 			{ MEAS_AIRCRAFT_SPEED_MEAS_MACH_NUMBER = input; };

	void SET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_ALPHA(double input) 			{ MEAS_AIRCRAFT_ADDITIONAL_MEAS_ALPHA = input; };
	void SET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_BETA(double input) 			{ MEAS_AIRCRAFT_ADDITIONAL_MEAS_BETA = input; };
	void SET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_DYNAMIC_PRESSURE(double input) 		{ MEAS_AIRCRAFT_ADDITIONAL_MEAS_DYNAMIC_PRESSURE = input; };
	void SET_MEAS_AIRCRAFT_ADDITIONAL_MEAS_TANK_FILLING(double input) 			{ MEAS_AIRCRAFT_ADDITIONAL_MEAS_TANK_FILLING = input; };

	void SET_ENVIRONMENT_VARIABLES_TEMPERATURE(double input) 			{ ENVIRONMENT_VARIABLES_TEMPERATURE = input; };
	void SET_ENVIRONMENT_VARIABLES_DENSITY_OF_AIR(double input) 			{ ENVIRONMENT_VARIABLES_DENSITY_OF_AIR = input; };
	void SET_ENVIRONMENT_VARIABLES_PRESSURE(double input) 				{ ENVIRONMENT_VARIABLES_PRESSURE = input; };
	void SET_ENVIRONMENT_VARIABLES_SPEED_OF_SOUND(double input) 			{ ENVIRONMENT_VARIABLES_SPEED_OF_SOUND = input; };

	void SET_WIND_COMPONENTS_U_WIND(double input) 					{ WIND_COMPONENTS_U_WIND = input; };
	void SET_WIND_COMPONENTS_V_WIND(double input) 					{ WIND_COMPONENTS_V_WIND = input; };
	void SET_WIND_COMPONENTS_W_WIND(double input) 					{ WIND_COMPONENTS_W_WIND = input; };
	void SET_WIND_COMPONENTS_P_WIND(double input) 					{ WIND_COMPONENTS_P_WIND = input; };
	void SET_WIND_COMPONENTS_Q_WIND(double input) 					{ WIND_COMPONENTS_Q_WIND = input; };
	void SET_WIND_COMPONENTS_R_WIND(double input) 					{ WIND_COMPONENTS_R_WIND = input; };
};

#endif
